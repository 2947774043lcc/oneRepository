<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">


    <!--
        通过bean元素声明SpringBean对象的
        class是你要声明实例的类型
        id是该实例指定的名称
    -->
   <bean id="UserDaoImpl" class="com.yuntu.mapper.impl.UserDaoImpl"/>
   <bean id="UserDao2Impl" class="com.yuntu.mapper.impl.UserDao2Impl"/>
    <bean id="UserService" class="com.yuntu.service.impl.UserServiceImpl">
        <property name="userDao" ref="UserDaoImpl"/>
    </bean>
    <bean id="UserService2" class="com.yuntu.service.impl.UserServiceImpl">
        <!--
        property元素用来为实例的属性赋值
        此处调用的是setUserDao()方法实现的
        ref:引用Spring容器中创建好的bean对象
        value:给具体的值,一般用于实体类
        -->
        <property name="userDao" ref="UserDao2Impl"/>
    </bean>
    <!--
    Spring容器默认的写法对应的是实体类中的无参构造
    当无参构造被覆盖时,会去调用有参
    -->
    <bean id="user" class="com.yuntu.entity.User">
        <property name="userName" value="张三"/>
        <property name="age" value="18"/>
        <property name="id" value="101"/>
    </bean>
    <!--
    通过index下标对应找到属性赋值
    -->
    <bean id="userId" class="com.yuntu.entity.User">
        <constructor-arg index="0" value="张三"/>
        <constructor-arg index="1" value="15"/>
        <constructor-arg index="2" value="10"/>
    </bean>
    <!--
    通过实体类类型进行属性赋值
    -->
    <bean id="userId1" class="com.yuntu.entity.User">
        <constructor-arg type="java.lang.String" value="张三"/>
        <constructor-arg type="int" value="15"/>
        <constructor-arg type="java.lang.Integer" value="10"/>
    </bean>
    <!--
    根据实体类属性名对应赋值
    -->
    <bean id="userId2" class="com.yuntu.entity.User">
        <constructor-arg name="userName" value="张三"/>
        <constructor-arg name="age" value="123"/>
        <constructor-arg name="id" value="11"/>
    </bean>
</beans>