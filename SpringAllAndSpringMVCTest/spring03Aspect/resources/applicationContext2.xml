<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx">
    <!--注解实现自动装配-->
      <context:annotation-config/>
    <!--组件扫描-->
    <context:component-scan base-package="com.yuntu"/>


    <bean id="beforeLog" class="com.yuntu.aopLog.BeforeLog"/>
    <bean id="afterLog" class="com.yuntu.aopLog.AfterLog"/>
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.yuntu..*(..))"/>
        <aop:advisor advice-ref="beforeLog" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
    </aop:config>


    <!--
    <aop:aspect>
    在面向切面编程时，我门一般都会用<aop:aspect></aop:aspect>定义切面和切点通常作用与日志管理 和 缓存
    <aop:advisor>
    在进行事务管理的时候，我们一般会用
    <aop:advisor></aop:advisor>定义切面和切点
    通常就作用与事务管理
    -->

    <!--
    面向切面编程(AOP)
        从系统中分离出切面(公共方法),独立于业务逻辑实现,
        在程序执行时将切面织入程序中允许,并会根据配置在不同的位置执行对应的方法
    -->
</beans>